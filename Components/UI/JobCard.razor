@using Invoqs.Models

<div class="card h-100 shadow-sm job-card">
    <div class="card-body d-flex flex-column">
        <!-- Header with status and actions -->
        <div class="d-flex justify-content-between align-items-start mb-3">
            <div class="job-type-icon">
                @if (Job.TypeIcon.StartsWith("/images/"))
                {
                    <img src="@Job.TypeIcon" alt="@Job.TypeDisplayName" class="job-type-image" />
                }
                else
                {
                    <i class="@Job.TypeIcon text-primary fs-4"></i>
                }
            </div>
            <div class="d-flex align-items-center gap-2">
                <span class="badge bg-@Job.StatusColor">
                    <i class="@Job.StatusIcon me-1"></i>
                    @Job.Status
                </span>
                @if (Job.IsInvoiced)
                {
                    <span class="badge bg-info text-white ms-1"
                        title="Invoiced on @Job.InvoicedDate?.ToString("dd/MM/yyyy")">
                        <i class="bi bi-receipt me-1"></i>
                        Invoiced
                    </span>
                }
                <div class="dropdown">
                    <button class="btn btn-link text-muted p-0" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <!-- Status Change Actions -->
                        <li>
                            <h6 class="dropdown-header">Change Status</h6>
                        </li>
                        @if (Job.Status != JobStatus.New)
                        {
                            <li><button class="dropdown-item"
                                    @onclick="() => OnStatusChange.InvokeAsync((Job, JobStatus.New))"
                                    @onclick:preventDefault="true">
                                    <i class="bi bi-clock me-2"></i>Mark as New
                                </button></li>
                        }
                        @if (Job.Status != JobStatus.Active)
                        {
                            <li><button class="dropdown-item"
                                    @onclick="() => OnStatusChange.InvokeAsync((Job, JobStatus.Active))"
                                    @onclick:preventDefault="true">
                                    <i class="bi bi-play-circle me-2"></i>Mark as Active
                                </button></li>
                        }
                        @if (Job.Status != JobStatus.Completed)
                        {
                            <li><button class="dropdown-item"
                                    @onclick="() => OnStatusChange.InvokeAsync((Job, JobStatus.Completed))"
                                    @onclick:preventDefault="true">
                                    <i class="bi bi-check-circle me-2"></i>Mark as Completed
                                </button></li>
                        }
                        @if (Job.Status != JobStatus.Cancelled)
                        {
                            <li><button class="dropdown-item text-danger"
                                    @onclick="() => OnStatusChange.InvokeAsync((Job, JobStatus.Cancelled))"
                                    @onclick:preventDefault="true">
                                    <i class="bi bi-x-circle me-2"></i>Mark as Cancelled
                                </button></li>
                        }

                        <li>
                            <hr class="dropdown-divider">
                        </li>

                        <!-- Job Actions -->
                        <li><button class="dropdown-item" @onclick="() => HandleEditJob(Job.Id)" @onclick:preventDefault="true">
                            <i class="bi bi-pencil me-2"></i>Edit Job
                        </button></li>
                        @if (Job.CanBeInvoiced)
                        {
                            <li><button class="dropdown-item text-success"
                                    @onclick="HandleGenerateInvoiceClick" @onclick:preventDefault="true">
                                    <i class="bi bi-file-earmark-text me-2"></i>Generate Invoice
                                </button></li>
                        }
                        else if (Job.Status == JobStatus.Completed && Job.IsInvoiced)
                        {
                            <li><span class="dropdown-item-text text-muted">
                                    <i class="bi bi-check-circle me-2"></i>Already Invoiced
                                </span></li>
                        }

                        <li>
                            <hr class="dropdown-divider">
                        </li>

                        <!-- Danger Zone -->
                        <li><button class="dropdown-item text-danger" @onclick="ShowDeleteConfirmation"
                                @onclick:preventDefault="true">
                                <i class="bi bi-trash me-2"></i>Delete Job
                            </button></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Job Title and Type -->
        <h5 class="card-title text-primary mb-2">@Job.Title</h5>
        <div class="mb-3">
            <span class="badge bg-light text-dark mb-2">
                <i class="@Job.TypeIcon me-1"></i>
                @Job.TypeDisplayName
            </span>
            @if (Customer != null)
            {
                <div class="mt-2">
                    <small class="text-muted">
                        <i class="bi bi-building me-1"></i>
                        @if (Customer.IsDeleted)
                        {
                            <span class="text-decoration-line-through">@Customer.Name</span>
                            <span class="text-danger ms-1">(Deleted)</span>
                        }
                        else
                        {
                            @Customer.Name
                        }
                    </small>
                </div>
            }
            else
            {
                @* Handle hard delete case (current behavior) *@
                <div class="mt-2">
                    <small class="text-muted">
                        <i class="bi bi-building me-1"></i>
                        <span class="text-muted">[Deleted Customer]</span>
                    </small>
                </div>
            }

            <!-- ===== TYPE-SPECIFIC INFO BADGES ===== -->
            @if (Job.Type == JobType.SkipRental && !string.IsNullOrEmpty(Job.SkipNumber))
            {
                <div class="mt-2">
                    <small class="badge bg-secondary">
                        #@Job.SkipNumber
                    </small>
                </div>
            }
            @if (Job.Type == JobType.SandDelivery && !string.IsNullOrEmpty(Job.SandMaterialType))
            {
                <div class="mt-2">
                    <small class="badge bg-secondary">
                        @Job.SandMaterialTypeDisplay
                    </small>
                </div>
            }
            @if (Job.Type == JobType.ForkLiftService && !string.IsNullOrEmpty(Job.ForkliftSize))
            {
                <div class="mt-2">
                    <small class="badge bg-secondary">
                        @Job.ForkliftSizeDisplay
                    </small>
                </div>
            }
        </div>

        <!-- Job Details -->
        <div class="job-details mb-3 flex-grow-1">
            <div class="detail-item mb-2">
                <i class="bi bi-geo-alt text-muted me-2"></i>
                <span class="text-muted small">@Job.Address</span>
            </div>

            @if (!string.IsNullOrWhiteSpace(Job.Description))
            {
                <div class="detail-item mb-2">
                    <i class="bi bi-file-text text-muted me-2"></i>
                    <span class="text-muted small">@Job.Description</span>
                </div>
            }

            <div class="detail-item mb-2">
                <i class="bi bi-calendar text-muted me-2"></i>
                <span class="text-muted small">
                    Start: @Job.StartDate.ToString("MMM dd, yyyy")
                    @if (Job.EndDate.HasValue)
                    {
                        <br />
                        <span>End: @Job.EndDate.Value.ToString("MMM dd, yyyy")</span>
                    }
                </span>
            </div>
        </div>

        <!-- Job Stats -->
        <div class="job-stats mb-3">
            <div class="row text-center">
                <div class="col-6">
                    <div class="stat-number text-primary fw-bold">@Job.DurationDays</div>
                    <div class="stat-label text-muted small">Days</div>
                </div>
                <div class="col-6">
                    <div class="stat-number text-success fw-bold">Â£@Job.Price.ToString("N2")</div>
                    <div class="stat-label text-muted small">Price</div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="mt-auto">
            <div class="d-grid">
                <button class="btn btn-primary btn-sm" @onclick="() => ViewDetails(Job.Id)">
                    <i class="bi bi-eye me-1"></i>
                    View Details
                </button>
            </div>
        </div>
    </div>
</div>

@* Delete Confirmation Modal *@
@if (showDeleteConfirmation)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Job</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <i class="bi bi-exclamation-triangle text-danger" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">Are you sure?</h5>
                        <p class="text-muted">
                            This will permanently delete the job <strong>@Job.Title</strong> at @Job.Address.
                            This action cannot be undone.
                        </p>
                        @if (Job.Status == JobStatus.Completed && Job.IsInvoiced)
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>Warning:</strong> This job has been invoiced. Deleting it may affect your financial records.
                            </div>
                        }
                        else if (Job.Status == JobStatus.Active)
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                This job is currently active. Consider marking it as cancelled instead.
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash me-1"></i>
                        }
                        @(isDeleting ? "Deleting..." : "Delete Job")
                    </button>
                </div>
            </div>
        </div>
    </div>
}